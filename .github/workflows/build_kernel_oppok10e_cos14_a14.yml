name: Build Kernel OPPO K10E (ColorOS 14 A14) with KSU
on:
  workflow_call:
  workflow_dispatch:
env:
  PYTHON_VERSION: "3" # Only 2(Ubuntu 22.04) or 3(Any OS Versions).
  PACK_METHOD: "Anykernel3" # Anykernel3 need SOURCE and BRANCH, MKBOOTIMG needn't it.
  KERNELSU_METHOD: "shell" # shell, manual and only.
  PATCHES_SOURCE: "author/source" # [your_name]/[your_patch] -> gooder123/NonGKI_Patcher
  PATCHES_BRANCH: "branch" # [your_branch] -> main
  HOOK_METHOD: "normal" # manual hook method,can choice syscall and normal.
  HOOK_OLDER: "false" # contain backport older patch and syscall older patch.
  PROFILE_NAME: "PERM10_cos14_a14.env" # your profile name.
  KERNELSU_SUS_PATCH: "false" # if u need manual susfs patch to kernelsu.
  KPM_ENABLE: "false" # Only use it for SukiSU-Ultra.
  KPM_PATCH_SOURCE: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux" # patch exec file source -> raw.githubusercontent.com/Test/Test/patch .
  GENERATE_DTB: "false" # if u kernel need DTB , but cannot auto generate it. (Only Anykernel3).
  GENERATE_CHIP: "qcom" # only supported for qcom and mediatek.
  BUILD_DEBUGGER: "false" # Output build errors.
  BUILD_OTHER_CONFIG: "false" # Merge config files.
  FREE_MORE_SPACE: "false" # if u want get more space, enabled it.
  REKERNEL_ENABLE: "false" # if u need Re:Kernel.


jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Free Disk Space (Ubuntu)
        if: env.FREE_MORE_SPACE == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Remove useless tools
        run: |
          sudo rm -rf /opt/hostedtoolcache
          df -h

      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME
              DEVICE_CODENAME
              CUSTOM_CMDS
              EXTRA_CMDS
              KERNEL_SOURCE
              KERNEL_BRANCH
              CLANG_SOURCE
              CLANG_BRANCH
              GCC_GNU
              GCC_64_SOURCE
              GCC_64_BRANCH
              GCC_32_SOURCE
              GCC_32_BRANCH
              DEFCONFIG_SOURCE
              DEFCONFIG_NAME
              DEFCONFIG_ORIGIN_IMAGE
              KERNELSU_SOURCE
              KERNELSU_BRANCH
              KERNELSU_NAME
              SUSFS_ENABLE
              SUSFS_FIXED
              SUSFS_UPDATE
              AK3_SOURCE
              AK3_BRANCH
              BOOT_SOURCE
              LXC_ENABLE
              HAVE_NO_DTBO
              HAVE_NO_DTBO_TOOL
              ROM_TEXT

          )

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

          # Move patch folder to tmp
          mv $GITHUB_WORKSPACE/Patches /tmp/
          mv $GITHUB_WORKSPACE/Bin /tmp/

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          temp-reserve-mb: 64
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install necessary packages
        run: |
          lsb_release -a
          UBUNTU_VERSION=$(lsb_release -sr)
          sudo apt-get update

          if [ $UBUNTU_VERSION == "22.04" ] || [ $UBUNTU_VERSION == "20.04" ]; then
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler
            sudo apt-get install p7zip p7zip-full -y
            if [ "${{ env.PYTHON_VERSION }}" == "3" ]; then
                sudo apt install python2 python3 -y
            elif [ "${{ env.PYTHON_VERSION }}" == "2" ]; then
                sudo apt install python2 -y
                sudo rm /usr/bin/python
                sudo ln -s /usr/bin/python2.7 /usr/bin/python
            else
                echo "You need choose a python version."
                false
            fi
          else
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3
            sudo apt-get install zstd libc6 binutils libc6-dev-i386 gcc g++ p7zip p7zip-full -y
          fi

      - name: Install GNU GCC
        if: env.GCC_GNU == 'true'
        run: |
          if [ -z ${{ env.GCC_64_SOURCE }} ] && [ -z ${{ env.GCC_32_SOURCE }} ]; then
            sudo apt-get install binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi -y
            echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
            echo "GCC_32=CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
          else
            echo "You needn't gcc powered by system."
          fi

      - name: Set Compile Environment
        run: |
          cd $GITHUB_WORKSPACE

          # Copy Shell
          cp /tmp/Bin/found_gcc.sh ./

          # Set GCC Aarch64
          if [[ "${{ env.CLANG_SOURCE }}" == *proton* ]]; then
            echo "Detected Proton Clang. Not use GCC Source."
            GCC_64_BIN=aarch64-linux-gnu-
            echo "GCC_64=CROSS_COMPILE=$GCC_64_BIN" >> $GITHUB_ENV
          elif [ -z "${{ env.GCC_64_SOURCE }}" ]; then
            echo "Not set GCC 64!"
          else
            if [[ "${{ env.GCC_64_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_64_SOURCE }} -b ${{ env.GCC_64_BRANCH }} gcc-64 --depth=1
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-64.tar.gz ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -zxvf gcc-64.tar.gz
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.tar.xz' ]]; then
              wget -O gcc-64.tar.xz ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -xvf gcc-64.tar.xz --strip-components 1
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-64.zip ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
            fi
            bash found_gcc.sh GCC_64
          fi


          # Set GCC ARM32
          if [[ "${{ env.CLANG_SOURCE }}" == *proton* ]]; then
            echo "Detected Proton Clang. Not use GCC Source."
            GCC_32_BIN=arm-linux-gnueabi-
            echo "GCC_32=CROSS_COMPILE_ARM32=$GCC_32_BIN" >> $GITHUB_ENV
          elif [ -z "${{ env.GCC_32_SOURCE }}" ]; then
            echo "Not set GCC 32!"
          else
            if [[ "${{ env.GCC_32_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_32_SOURCE }} -b ${{ env.GCC_32_BRANCH }} gcc-32 --depth=1
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-32.tar.gz ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -zxvf gcc-32.tar.gz
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.tar.xz' ]]; then
              wget -O gcc-32.tar.xz ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -xvf gcc-32.tar.xz --strip-components 1
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-32.zip ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              unzip gcc-32.zip -d gcc-32/
            fi
            if [ -z "${{ env.GCC_64_SOURCE }}" ]; then
                bash found_gcc.sh GCC_32_ONLY
            else
                bash found_gcc.sh GCC_32
            fi
          fi

          # Set Clang
          if [[ "${{ env.CLANG_SOURCE }}" == *".git" ]]; then
            git clone ${{ env.CLANG_SOURCE }} -b ${{ env.CLANG_BRANCH }} clang-custom --depth=1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.gz' ]]; then
            wget -O clang.tar.gz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -zxvf clang.tar.gz
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.xz' ]]; then
            wget -O clang.tar.xz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -xvf clang.tar.xz --strip-components 1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.zip' ]]; then
            wget -O clang.zip ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            unzip clang.zip -d clang-custom/
          elif [[ "${{ env.CLANG_SOURCE }}" == *"antman" ]]; then
            mkdir clang-custom
            cd clang-custom
            wget ${{ env.CLANG_SOURCE }} -O antman
            chmod +x antman
            bash antman -S
          else
            echo "You needn't clang!"
          fi

      - name: Get Kernel Source
        run: |
          cd $GITHUB_WORKSPACE
          git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} device_kernel --depth=1
          if [[ -n "${{ env.DEFCONFIG_SOURCE }}" ]]; then
            if [[ -d "device_kernel/arch/arm64/configs" ]]; then
                wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/kernel/msm-5.4/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            else
                wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/kernel/msm-5.4/arch/arm/configs/${{ env.DEFCONFIG_NAME }}
            fi
          elif [[ -n "${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }}" ]]; then
            wget ${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }} -O $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/Image
            if [[ -d "device_kernel/arch/arm64/configs" ]]; then
                $GITHUB_WORKSPACE/device_kernel/scripts/extract-ikconfig $GITHUB_WORKSPACE/device_kernel/Image > $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            else
                $GITHUB_WORKSPACE/device_kernel/scripts/extract-ikconfig $GITHUB_WORKSPACE/device_kernel/Image > $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/arch/arm/configs/${{ env.DEFCONFIG_NAME }}
            fi
          fi

          # Get KernelSU Version and Kernel Version

          KERNEL_VERSION=$(head -n 3 $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/Makefile | grep -E 'VERSION|PATCHLEVEL' | awk '{print $3}' | paste -sd '.')
          echo "KERNEL_VERSION=$(head -n 3 device_kernel/kernel/msm-5.4/Makefile | grep -E 'VERSION|PATCHLEVEL' | awk '{print $3}' | paste -sd '.')" >> $GITHUB_ENV
          echo "FIRST_VERSION=$(echo "$KERNEL_VERSION" | awk -F '.' '{print $1}')" >> $GITHUB_ENV
          echo "SECOND_VERSION=$(echo "$KERNEL_VERSION" | awk -F '.' '{print $2}')" >> $GITHUB_ENV


      - name: Patch Kernel for no-kprobe
        run: |
          cd $GITHUB_WORKSPACE
          if grep -q "CONFIG_KSU" "device_kernel/fs/exec.c"; then
            echo "Your kernel source code appears to have been manually patched, so this step is skipped."
          else
            if [[ ${{ env.HOOK_METHOD }} == "normal" ]]; then
              if [[ -f "/tmp/Patches/normal_patches.sh" ]]; then
                  cp /tmp/Patches/normal_patches.sh device_kernel/
                  cd device_kernel
                  bash normal_patches.sh
                  echo "execuated patch successfully."
                  if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                        cp /tmp/Patches/backport_patches_early.sh ./
                        bash backport_patches_early.sh
                        echo "execuated backport patch early successfully. "
                  else
                      echo "your kernel needn't backport patch."
                  fi
              else
                  echo "Cannot found normal_patches.sh in build project , please check u file existed in build project !"
                  false
              fi
            elif [[ ${{ env.HOOK_METHOD }} == "syscall" ]]; then
               if [[ -f "/tmp/Patches/syscall_hook_patches_older.sh" ]] && [[ "${{ env.HOOK_OLDER }}" == "true" ]]; then
                   cp /tmp/Patches/syscall_hook_patches_older.sh device_kernel/
                   cd device_kernel
                   bash syscall_hook_patches_older.sh
                   echo "execuated syscall patch older successfully."
                   if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                     cp /tmp/Patches/backport_patches.sh ./
                     bash backport_patches.sh
                     if [ "${{ env.FIRST_VERSION }}" -lt 5 ] && [ "${{ env.SECOND_VERSION }}" -lt 10 ]; then
                         cp /tmp/Patches/Patch/backport_kernel_read_and_kernel_write_to_ksu.patch ./
                         patch -p1 < backport_kernel_read_and_kernel_write_to_ksu.patch || true
                         echo "execuated backport patch kernel_read and kernel_read successfully. If you current kernel version < 4.14, then u maybe manual fixed it."
                     fi
                     echo "execuated backport patch successfully. "
                   else
                     echo "your kernel needn't backport patch."
                   fi
               elif [[ -f "/tmp/Patches/syscall_hook_patches.sh" ]]; then
                   cp /tmp/Patches/syscall_hook_patches.sh device_kernel/
                   cd device_kernel
                   bash syscall_hook_patches.sh
                   echo "execuated syscall patch successfully."
                   if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                     cp /tmp/Patches/backport_patches.sh ./
                     bash backport_patches.sh
                     if [ "${{ env.FIRST_VERSION }}" -lt 5 ] && [ "${{ env.SECOND_VERSION }}" -lt 10 ]; then
                         cp /tmp/Patches/Patch/backport_kernel_read_and_kernel_write_to_ksu.patch ./
                         patch -p1 < backport_kernel_read_and_kernel_write_to_ksu.patch || true
                         echo "execuated backport patch kernel_read and kernel_read successfully. If you current kernel version < 4.14, then u maybe manual fixed it."
                     fi
                     echo "execuated backport patch successfully."
                   fi
                else
                   echo "Cannot found syscall_hook_patches.sh in build project , please check u file existed in build project !"
                   false
               fi
            else
              echo "please input vaild option!"
              false
            fi
          fi


      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Build Kernel
        run: |
          MERGE_CONFIG_FILES=("vendor/debugfs.config" "vendor/lahaina_QGKI.config")
          export PATH=$GITHUB_WORKSPACE/clang-custom/bin:$PATH
          cd $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/
          if [ -z "${{ env.GCC_32 }}" ] && [ -z "${{ env.GCC_64 }}" ]; then
            make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.DEFCONFIG_NAME }}
            if [[ "${{ env.BUILD_OTHER_CONFIG }}"  == "true" ]]; then
                for FILES in "${MERGE_CONFIG_FILES[@]}"; do
                    ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/arm64/configs/$FILES
                done
                make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} olddefconfig
            fi
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} 2>&1|tee error.log
          elif [ -z "${{ env.GCC_32 }}" ]; then
            make O=out ARCH=arm64 ${{ env.GCC_64 }} ${{ env.DEFCONFIG_NAME }}
            if [[ "${{ env.BUILD_OTHER_CONFIG }}"  == "true" ]]; then
                for FILES in "${MERGE_CONFIG_FILES[@]}"; do
                    ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/arm64/configs/$FILES
                done
                make O=out ARCH=arm64 ${{ env.GCC_64 }} olddefconfig
            fi
            make -j$(nproc --all) O=out ARCH=arm64 ${{ env.GCC_64 }} 2>&1|tee error.log
          elif [ -z "${{ env.GCC_64 }}" ]; then
            make O=out ARCH=arm ${{ env.GCC_64 }} ${{ env.DEFCONFIG_NAME }}
            if [[ "${{ env.BUILD_OTHER_CONFIG }}"  == "true" ]]; then
                for FILES in "${MERGE_CONFIG_FILES[@]}"; do
                    ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/arm/configs/$FILES
                done
                make O=out ARCH=arm ${{ env.GCC_32 }} olddefconfig
            fi
            make -j$(nproc --all) O=out ARCH=arm ${{ env.GCC_32 }} 2>&1|tee error.log
          elif [ -z "${{ env.CLANG_SOURCE }}" ]; then
            make O=out ARCH=arm64 ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.DEFCONFIG_NAME }}
            if [[ "${{ env.BUILD_OTHER_CONFIG }}"  == "true" ]]; then
                for FILES in "${MERGE_CONFIG_FILES[@]}"; do
                    ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/arm64/configs/$FILES
                done
                make O=out ARCH=arm64 ${{ env.GCC_64 }} ${{ env.GCC_32 }} olddefconfig
            fi
            make -j$(nproc --all) O=out ARCH=arm64 ${{ env.GCC_64 }} ${{ env.GCC_32 }} 2>&1|tee error.log
          else
            make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.DEFCONFIG_NAME }}
            if [[ "${{ env.BUILD_OTHER_CONFIG }}"  == "true" ]]; then
                for FILES in "${MERGE_CONFIG_FILES[@]}"; do
                    ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/arm64/configs/$FILES
                done
                make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} olddefconfig
            fi
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} 2>&1|tee error.log
          fi

          ## Generate DTBO
          if [ "${{ env.HAVE_NO_DTBO }}" == "true" ] && [ "${{ env.HAVE_NO_DTBO_TOOL }}" == "true" ]; then
            cd $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4
            mkdir dtbo_tool
            cd dtbo_tool
            wget https://android.googlesource.com/platform/system/libufdt/+archive/master/utils.tar.gz -o mkdtboimg.tar.gz
            tar zxvf mkdtboimg.tar.gz
            cd ../
            if [ -d "$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/vendor" ]; then
                python dtbo_tool/src/mkdtboimg.py create $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/vendor/${{ env.GENERATE_CHIP }}/*.dtbo
            else
                python dtbo_tool/src/mkdtboimg.py create $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/${{ env.GENERATE_CHIP }}/*.dtbo
            fi
          fi

          if grep -q "Error 2" "error.log"; then
            false
          fi

      - name: Analyze compile error
        if: ${{ failure() && env.BUILD_DEBUGGER == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/

          cp /tmp/Bin/check_error.sh ./
          bash check_error.sh

          if [ -f "have_error" ]; then
            false
          else
            echo "Skipped."
          fi

      - name: KPM Patcher (Experiment)
        if: env.KPM_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
              MODE="gz-dtb"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
              MODE="gz"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
              MODE="plain"
          else
              echo "No valid Image file found."
              exit 1
          fi

          case "$MODE" in
            gz-dtb)
              if [ -f "include/linux/set_memory.h" ]; then
                  if [ -d "out/arch/arm64/boot/dts" ]; then
                      rm -f "$IMAGE_DIR/Image.gz-dtb" "$IMAGE_DIR/Image.gz"
                      cp patch "$IMAGE_DIR/"
                      cd "$IMAGE_DIR/" || exit 1
                      ./patch
                      rm -f Image
                      mv oImage Image
                      gzip -c Image > Image.gz
                      cat Image.gz dts/${{ env.GENERATE_CHIP }}/*.dtb > Image.gz-dtb
                      echo "Hook Image successfully !"
                  elif [ -d "out/arch/arm64/boot/vendor/dts" ]; then
                      rm -f "$IMAGE_DIR/Image.gz-dtb" "$IMAGE_DIR/Image.gz"
                      cp patch "$IMAGE_DIR/"
                      cd "$IMAGE_DIR/" || exit 1
                      ./patch
                      rm -f Image
                      mv oImage Image
                      gzip -c Image > Image.gz
                      cat Image.gz vendor/dts/${{ env.GENERATE_CHIP }}/*.dtb > Image.gz-dtb
                      echo "Hook Image successfully !"
                  else
                      echo "Not found dts folder, abort."
                  fi
              else
                  echo "Not supported for your kernel !"
              fi
              ;;
            gz)
              rm -f "$IMAGE_DIR/Image.gz"
              cp patch "$IMAGE_DIR/"
              cd "$IMAGE_DIR/" || exit 1
              ./patch
              rm -f Image
              mv oImage Image
              gzip -c Image > Image.gz
              echo "Hook Image successfully !"
              ;;
            plain)
              cp patch "$IMAGE_DIR/"
              cd "$IMAGE_DIR/" || exit 1
              ./patch
              mv oImage Image
              echo "Hook Image successfully !"
              ;;
          esac

      - name: Make Anykernel3 Flasher
        if: env.PACK_METHOD == 'Anykernel3'
        run: |
          TIME=$(date +"%Y%m%d%H%M%S")

          cd $GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/
          if [[ -d "arch/arm64/configs" ]]; then
            IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/out/arch/arm64/boot"
          else
            IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/out/arch/arm/boot"
          fi

          mkdir -p tmp

          if [[ "${{ env.AK3_SOURCE }}" =~ "osm0sis" ]]; then
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' Anykernel3/anykernel.sh
            sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' Anykernel3/anykernel.sh
            sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' Anykernel3/anykernel.sh
            echo "Now using official Anykernel3."
          else
            echo "Now using custom Anykernel3."
          fi

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            cp -fp $IMAGE_DIR/Image.gz-dtb tmp
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            cp -fp $IMAGE_DIR/Image.gz tmp
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/zImage-dtb" ]]; then
            cp -fp $IMAGE_DIR/zImage-dtb tmp
            echo "Found zImage-dtb (ARMV7A) !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            # gzip -c $IMAGE_DIR/Image > $IMAGE_DIR/Image.gz
            # cp -fp $IMAGE_DIR/Image.gz tmp
            cp -fp $IMAGE_DIR/Image tmp
            echo "Found Image !"
          fi

          if [[ -f "$IMAGE_DIR/dtbo.img" ]]; then
            cp -fp $IMAGE_DIR/dtbo.img tmp
            echo "Found dtbo.img !"
          else
            echo "Doesn't found dtbo.img! Your device maybe needn't the file."
          fi

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb tmp
          elif [ "${{ env.GENERATE_DTB }}" == "true" ]; then
            if [ -d "$IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            elif [ -d "$IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            else
                echo "Missing .dtb file in dts or dts/vendor ! Generate Failed !"
                false
            fi
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          cp -rp ./Anykernel3/* tmp
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          cp -fp tmp/tmp.zip ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip
          rm -rf tmp

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip" >> $GITHUB_ENV

      - name: Make Latest Boot Image
        if: env.PACK_METHOD == 'MKBOOTIMG'
        run: |
          cd $GITHUB_WORKSPACE/
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/kernel/msm-5.4/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")
          FORMAT_MKBOOTING=$(echo `mkboottools/unpack_bootimg.py --boot_img=boot_source_${{ env.DEVICE_NAME }}.img --format mkbootimg`)

          mkboottools/unpack_bootimg.py --boot_img boot_source_${{ env.DEVICE_NAME }}.img

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz-dtb out/kernel
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz out/kernel
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image out/kernel
            echo "Found Image !"
          fi

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb out/dtb
          elif [ "${{ env.GENERATE_DTB }}" == "true" ]; then
            if [ -d "$IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            elif [ -d "$IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            else
                echo "Missing .dtb file in dts or dts/vendor ! Generate Failed !"
                false
            fi
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          eval "mkboottools/mkbootimg.py $FORMAT_MKBOOTING -o ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img"

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img" >> $GITHUB_ENV

          rm -f $GITHUB_WORKSPACE/boot_source_${{ env.DEVICE_NAME }}.img

      - name: Upload Build Artifacts For Anykernel3
        if: env.PACK_METHOD == 'Anykernel3'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            device_kernel/kernel/msm-5.4/${{ env.PACK_NAME }}

      - name: Upload Build Artifacts For Boot Image
        if: env.PACK_METHOD == 'MKBOOTIMG'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            ${{ env.PACK_NAME }}
